// Settings page script –¥–ª—è DataLens Formula Assistant
document.addEventListener('DOMContentLoaded', function() {
    const aiApiClient = new AIApiClient();
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const modeLocal = document.getElementById('mode-local');
    const modeAI = document.getElementById('mode-ai');
    const aiSettings = document.getElementById('ai-settings');
    const aiProvider = document.getElementById('ai-provider');
    const apiKeyInput = document.getElementById('api-key');
    const toggleKeyBtn = document.getElementById('toggle-key');
    const testConnectionBtn = document.getElementById('test-connection');
    const testResult = document.getElementById('test-result');
    const saveHistoryCheckbox = document.getElementById('save-history');
    const autoCopyCheckbox = document.getElementById('auto-copy');
    const saveBtn = document.getElementById('save-settings');
    const resetBtn = document.getElementById('reset-settings');

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadSettings();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modeLocal.addEventListener('change', handleModeChange);
    modeAI.addEventListener('change', handleModeChange);
    toggleKeyBtn.addEventListener('click', toggleApiKeyVisibility);
    testConnectionBtn.addEventListener('click', testConnection);
    saveBtn.addEventListener('click', saveSettings);
    resetBtn.addEventListener('click', resetSettings);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    function handleModeChange() {
        if (modeAI.checked) {
            aiSettings.style.display = 'block';
            aiSettings.classList.add('fade-in');
        } else {
            aiSettings.style.display = 'none';
            aiSettings.classList.remove('fade-in');
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ API –∫–ª—é—á–∞
    function toggleApiKeyVisibility() {
        if (apiKeyInput.type === 'password') {
            apiKeyInput.type = 'text';
            toggleKeyBtn.textContent = 'üôà';
        } else {
            apiKeyInput.type = 'password';
            toggleKeyBtn.textContent = 'üëÅÔ∏è';
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    async function testConnection() {
        const provider = aiProvider.value;
        const apiKey = apiKeyInput.value.trim();

        if (!apiKey) {
            showTestResult('error', '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        testConnectionBtn.disabled = true;
        testConnectionBtn.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...';
        showTestResult('', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

        try {
            const result = await aiApiClient.callAI(provider, '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DataLens Formula Assistant', apiKey);
            
            if (result.success) {
                showTestResult('success', `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${aiApiClient.providers[provider].name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
            } else {
                showTestResult('error', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`);
            }
        } catch (error) {
            showTestResult('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            testConnectionBtn.disabled = false;
            testConnectionBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function showTestResult(type, message) {
        testResult.style.display = 'block';
        testResult.className = `test-result ${type}`;
        testResult.textContent = message;

        if (type === 'success') {
            setTimeout(() => {
                testResult.style.display = 'none';
            }, 3000);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    async function loadSettings() {
        try {
            const settings = await chrome.storage.local.get([
                'workMode',
                'aiProvider',
                'apiKey',
                'saveHistory',
                'autoCopy'
            ]);

            // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            if (settings.workMode === 'ai') {
                modeAI.checked = true;
                handleModeChange();
            } else {
                modeLocal.checked = true;
            }

            // –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            if (settings.aiProvider) {
                aiProvider.value = settings.aiProvider;
            }

            // API –∫–ª—é—á
            if (settings.apiKey) {
                apiKeyInput.value = settings.apiKey;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            saveHistoryCheckbox.checked = settings.saveHistory !== false;
            autoCopyCheckbox.checked = settings.autoCopy !== false;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async function saveSettings() {
        try {
            const settings = {
                workMode: modeAI.checked ? 'ai' : 'local',
                aiProvider: aiProvider.value,
                apiKey: apiKeyInput.value.trim(),
                saveHistory: saveHistoryCheckbox.checked,
                autoCopy: autoCopyCheckbox.checked,
                lastUpdated: Date.now()
            };

            await chrome.storage.local.set(settings);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            showSaveNotification('success', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ popup –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            try {
                await chrome.runtime.sendMessage({
                    action: 'settingsUpdated',
                    settings: settings
                });
            } catch (error) {
                // Popup –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            showSaveNotification('error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }

    // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    async function resetSettings() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?')) {
            return;
        }

        try {
            // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await chrome.storage.local.clear();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            modeLocal.checked = true;
            modeAI.checked = false;
            handleModeChange();
            
            aiProvider.value = 'claude';
            apiKeyInput.value = '';
            saveHistoryCheckbox.checked = true;
            autoCopyCheckbox.checked = true;
            
            testResult.style.display = 'none';
            
            showSaveNotification('success', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            showSaveNotification('error', '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    function showSaveNotification(type, message) {
        const notification = document.createElement('div');
        notification.className = `save-notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 6px;
            color: white;
            font-size: 14px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
            background: ${type === 'success' ? '#28a745' : '#dc3545'};
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 2000);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
    apiKeyInput.addEventListener('input', function() {
        const key = this.value.trim();
        const provider = aiProvider.value;
        
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
        let isValid = false;
        switch (provider) {
            case 'claude':
                isValid = key.startsWith('sk-ant-') && key.length > 20;
                break;
            case 'deepseek':
                isValid = key.startsWith('sk-') && key.length > 20;
                break;
            case 'openai':
                isValid = key.startsWith('sk-') && key.length > 20;
                break;
        }

        if (key && !isValid) {
            this.style.borderColor = '#dc3545';
        } else {
            this.style.borderColor = '#e1e5e9';
        }
    });

    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
    `;
    document.head.appendChild(style);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:', e.error);
});